/* jshint esversion: 6 */


// ==========================================================================================================
// 参数的默认值
// ==========================================================================================================


// 上面是传统的实现方式，通过或运算实现，原理：如果运算符 || 左侧为true，直接返回左侧的值，否则返回右侧的值； 在person函数内，如果参数n没有传参，那么变量name得到的值就是“Zhangsan”，如果传参了，变量name的值就为参数n的值。
// 但是，前提是参数对应的布尔值不能false（比如：数字0，空字符串等转换成布尔值就是false），这就使得这种传统的实现方式存在一定的不足和缺陷。

function person(n,a){
    var name = n || 'Zhangsan';
    var age  = a ||  25;
}

// es6默认值
function person(name = 'godv', age = '29') {
    console.log(name, age);
}

person();
person('peanut', 17);

// 注意： 如果函数有多个参数，但只有部分需要指定默认值，另一部分不需要的话，那么，设定默认值的参数一定要放在最后。

//错误写法
function person1(age = 25, name){
    console.log(name,age);
}

person1();

//正确写法
function person2(name, age = 25){
   console.log(name, age);
}

// 只有当传入的参数为undefined，才会触发默认值赋值。否则，哪怕你传的参数值为0，false，null都不会触发默认值赋值，这就完美的解决了传统实现方式的弊端

function person3(age = 12){
    console.log(age);
}

person3(); //结果：12
person3(undefined); //结果：12

person3(0); //结果：0
person3(null); //结果：null


// 函数的参数是默认声明的，声明过的变量，就不能用let或者const关键字再次声明，否则会报错的

function person4(age = 12){
    let age = 25; //错误，再次声明age
}
// ==========================================================================================================


// ==========================================================================================================
// 扩展运算符
// ==========================================================================================================

function sum(a,b) {
    return  a+b ;
 }

let arr = [2,3];
//用扩展运算法将数组[2,3]转换成2,3  
sum(...arr);
//结果：5

// 它可以将一个数组转成一个对应的参数数列

// ==========================================================================================================

// ==========================================================================================================
// 箭头函数
// ==========================================================================================================

//箭头函数写法
var sum1 = (a,b) => {return a+b}
sum1(1,2);//结果：3

// 上面的参数和函数体部分，如果参数超过1个的话，需要用小括号（）括起来，函数体语句超过1条的时候，需要用大括号{ }括起来

